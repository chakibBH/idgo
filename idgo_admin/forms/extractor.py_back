# Copyright (c) 2017-2018 Datasud.
# All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License"); you may
# not use this file except in compliance with the License. You may obtain
# a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS, WITHOUT
# WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the
# License for the specific language governing permissions and limitations
# under the License.


from django import forms
from idgo_admin.models import Dataset
from idgo_admin.models import ExtractorSupportedFormat
from idgo_admin.models import Organisation
from idgo_admin.models import Resource
from idgo_admin.models import SupportedCrs


class ExtractorForm(forms.Form):

    organisation = forms.ModelChoiceField(
        label='Organisation',
        queryset=Organisation.objects.none(),
        required=False)

    dataset = forms.ModelChoiceField(
        label='Jeu de données',
        queryset=Dataset.objects.none(),
        required=False)

    resource = forms.ModelChoiceField(
        label='Ressource',
        queryset=Resource.objects.none(),
        required=False)

    jurisdiction = forms.BooleanField(
        label='Territoire de compétence')

    srs = forms.ModelChoiceField(
        label='Système de coordonnées',
        queryset=SupportedCrs.objects.all(),
        required=False)

    format_vector = forms.ModelChoiceField(
        label='Format de données vecteur',
        queryset=ExtractorSupportedFormat.objects.filter(type='vector'),
        required=False)

    format_raster = forms.ModelChoiceField(
        label='Format de données raster',
        queryset=ExtractorSupportedFormat.objects.filter(type='raster'),
        required=False)

    def __init__(self, *args, **kwargs):
        include = kwargs.pop('include', {})
        super().__init__(*args, **kwargs)

        user = include.pop('user', None)
        if not user:
            raise Exception('TODO')

        try:
            self.fields['srs'].initial = \
                SupportedCrs.objects.get(auth_name='EPSG', auth_code=2154)
        except SupportedCrs.DoesNotExist:
            pass

        self.fields['organisation'].queryset = Organisation.objects.filter(
            dataset__resource__in=Resource.objects.filter(extractable=True).exclude(layer=None)
            ).distinct()

        if self.data.get('organisation'):
            self.fields['dataset'].queryset = Dataset.objects.filter(
                organisation=self.organisation,
                resource__in=Resource.objects.filter(extractable=True).exclude(layer=None)
                ).distinct()

            if self.data.get('dataset'):
                self.fields['resource'].queryset = Resource.objects.filter(
                    dataset=self.dataset, extractable=True).exclude(layer=None)

        # self.fields['title'].initial = self.instance.title

    def clean(self):
        return self.cleaned_data
